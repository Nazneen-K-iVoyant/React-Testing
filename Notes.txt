Manual Testing

Am individual will open the website, ineract with the website and ensures everything works as intended.

If a new feature is released, you repeat the same steps.

You may have to test not only the new feature but also the existing features

Drawbacks:
- Time consuming
- Complex repetitive tasks has a risk of human error
- You may not get a chance to test all the features you should.



Automated Testing

Automated tests are programs that automate the task of testing your software.
Write code to test the software code.
Additional efforts required when you develop a feature.

Advantages:
- Not time consuming.
- Relaible, consistent and not error prone.
- Easy to identify and fix features that break tests.
- Gives confidence when shipping software.


Jest 
- Jest is a Javascript testingg framework
- Jest is a test runner that finds tests, runs the testss, determine whether the tests passed or failed and reports it back in a human readable manner.

RTL - React testing library
- Javascript testing utiility that provides virtual DOM for testing React components.
- React testing library provides a virtual DOM which we can use to interact with and verify the behaviour of a react component.
- Testing library is infact a family of packages which helps test UI components.
- The core library is called DOM testing library and RTL is simply a wrapper around this core library to test React applications in an easier way.


Types of tests:
- Unit tests
- Integration tests
- E2E tests


App.test.tsx in cra:
- test(name,fn,timeout)
    The first argument is the test name used to identify the test.
    The second argument is a function that contains the expectations to  test.
    The third argument is timeout which is an optional argument for specifying how long to wait before aborting the test. The default timeout value is 5 seconds.


Test Driven Development (TDD)

Test driven Development is a software development process where you write tests before writing the software code.
Once the tests have been written, you then write the code to ensure the tests pass
    1. Create tests that verify the functionality of a specific feature
    2. Write software code that will run the tests successfully when re-executed.
    3. Refactor the code for optimization while ensuring the tests continue to pass.
also called red-green testing as all tests go from a red failed state to a green passed state.

******************************************************************************************
Watch mode:
******************************************************************************************
Watch mode is an option  that we can pass to  jest asking to watch files that have chnaged since the last commit and execute tests related only to those changed  files.

An optimization designed to make your tests run fast regardless of how many tests you have.

******************************************************************************************
Filename Conventions:
******************************************************************************************
- Files with .test.ts or .test.tsx suffix.
- Files with .spec.js or .spec.tsx suffix.
- Files with .js or .tsx suffix in __tests__ folders
Recommendation is to always put your tests next to the code they are testing so that relative imports are shorter.

******************************************************************************************
Code Coverage:
******************************************************************************************
A metric that can help you understand how much of your software code is tested.

- Statement coverage: how many of the statements in the software code have been executed.
- Branches coverage: how many of the branches of the control structures (if statements for instances) have been executed.
- Function coverage: how many of the functions defined have been called.
- Line coverage: how many of lines of source code have been tested.

******************************************************************************************
Assertions:
- When writing tests, we often need to check that values meet certain conditions.
- Assertions decide if a test passes or fails
- Assertions are carried by using the expect method
- expext(value)
- A matcher can optionally accept an argument which is the correct expected value.


******************************************************************************************
RTL Queries


Every test we write generally involves the following basic steps:
- Render the component.
- Find an element rendered by the component.
- Assert against the element found in step 2 which will pass or fail the test.

To render the component, we use the render method from RTL.
For assertion, we use expect passing in a value and combine it  with a matcher function from jest  or jest-dom

******************************************************************************************
RTL Queries
- Queries are the methods that testing library provided to find elements on the page.
- To find a single element on the page, we have 
    - getBy..
    - queryBy..
    - findBy..
- To find multiple elements on the page, we have
    - getAllBy..
    - queryAllBy..
    - findAllBy..

- The two dots at the - each of these methods need to be combined with a suffix to form the actual query
- The suffix can be one of Role, labelText, PlaceHolderText, text, DisplayValue, AltText, Title and TestId

- getBy.. queries
 getBy.. class of queries return the matching node for a query, and throw a descriptive error if no elements match or if more than one match is found.

- getByRole
getByRole queries for elements with the given role
- Role refers to the ARIA (Accessible Rich Internet Applications) role which provides  semantic meaning to content to ensure people using assistive technologies are able to use them.
- By default, many semantic elements in HTML have a role
- If you are working with elements that do not have a default role or if you want to specify a different role, the role attribute can be used to add the desired role.

getByRole Options:
name,
The accessible name is for simple cases equal to
1. The label of a form element.
2. the text content of a button.
3. the value of the aria-label attribute.

getByRole Options
- name
- level
- hidden
- selected
- checked
- pressed

******************************************************************************
getByLabelText:
getByLabelText will search for the label that matches the given text, then find the element associated with that label.


getByPlaceholderText
getByPlaceholderText will search for all elements with a placeholder attribute and find one that matches the given text.

getByText
getByText will search for all elements that have a text node with textContent matching the given text

Typically, you'd use this to find paragraph, div or span elements,


getByDisplayValue
getByDisplayValue returns the input, textarea or select element that has the matching display value.

getByAltText
getByAltText will return the element that has the given alt text.
This method only supports elements which accept an alt attribute like <img>, <input>, <area> or custom HTML elements.

getByTitle
getByTitle returns the element that has the matching attribute.

getByTestId
getByTestId returns the element that has the matching data-testid attribute

Priority Order for Queries
"Your test should resemble how users interact with your code (component, page etc) as much as possible"
1. getByRole
2. getByLabelText
3. getByPlaceholderText
4. getByText
5. getByDisplayValue
6. getByAltText
7. getByTitle
8. getByTestId


RTL getAllBy Queries

- Find multiple elements in the DOM
- getAllBy returns an array of all matching nodes for a query, and throw an error if no elements match.
    getAllByRole
    getAllByLabelText
    getAllByPlaceholderText
    getAllByDisplayValue
    getAllByAltText
    getAllByTitle
    getAllByTestId


TextMatch
TextMatch represents a type which can be either a string, regex, function